Document Title: C3 Notes "Software" 
Document Author: Minh Tran
Book: Embedded Computing and Mechatronics with the PIC32 Microcontroller 
Author: Kevin M. Lynch, Nicholas Marchuk, Matthew L. Elwin

================================================================================
MEMORY 
================================================================================
2.1.3 Physical Memory Map (pp.27-30)

+ PIC32's physical memory addresses are 32 bits long; each address refers to a byte in the memory map.
  The physical address space consists of 2^32 addresses but there is actually less than 2^32 Bytes (4GB).
  Thus many physical addresses are meaningless and don't map to any bytes.   
  
+ PIC32 contains 4 types of memory: 
	(1) RAM
	(2) Flash Memory
	(3) Special Function Registers (a.k.a "Peripheral SFRs" or "SFRs")
	(4) Boot Flash 
	
	RAM: Contains data created and used by the program during its execution 
	Flash Memory: Stores program text
	SFRs: 32-bit words that correspond to the state of peripherals built into the PIC32. 
		Peripherals include(See. pp.20-25): 
			1. Digital I/O
			2. Analog Input
			3. Counter/Timer (Tx) 
			4. Real Time Clock/Calendar (RTCC) 
			5. Output Compare (OC)
			6. Comparators
			7. Input Capture (IC) 
			8. Change Notification (CN)
			9. DMA Controller 
			10. Parallel Master Port (PMP) 
			11. In-Circuit Debugger
			12. Watchdog Timer 
			13. Universal Synchronous/Asynchronous Receiver/Transmitter (USART) 
			14. Serial Peripheral Interface (SPI) 
			15. Inter-Integrated Circuit (I2C) 
			16. Universal Serial Bus (USB) 
			17. Controller Area Network (CAN) 
			18. Ethernet 
		Other:
			19. CPU (MIPS32 M4K microprocessor core) 
			20. Bus Matrix 
			21. Interrupt Controller 
			22. Prefetch Cache Module 
		
	Boot Flash: Extra flash memory (12KB) that contains program instructions executed upon reset 
				Bootflash typically perform PIC32 initialization and then call the program installed
				in program flash. 
				
				For the PIC32 on the NU32 board, the program instructions are collectively referred 
				to as the "bootloader program". The bootloader communicates with the host CPU (connected
				via USB) to load user programs onto the PIC32. 
				
				The last 4 words (4 32-bit registers) are Device Configuration Registers (DEVCFG0-DEVCFG3). 
				See "Special Features" section of Data Sheet. 
				
+ CPU accesses program instructions, data, and peripherals by writing a memory address to the bus

+ RAM, Flash, Peripheral SFRs, Boot Flash are not contiguous blocks of memory: 
	
	TYPE		 SIZE		STARTING PHYSICAL ADDRESS	
	====		=====		=========================
	RAM			128KB			0x0000 0000
	FLASH		512KB			0x1D00 0000
	SFRs	  	  1MB			0x1F80 0000
	BOOT FLASH	 12KB			0x1FC0 0000 

	
3.1 Virtual Memory Map 
		+ Fixed Mapping Translation Unit: Converts VA to PA for hardware
			PA = VA & 0x1FFFFFFF
		+ 0x80000000 - 0x9FFFFFFF: KSEG0: Cacheable
		  0xA0000000 - 0xBFFFFFFF: KSEG1: Noncacheable
		+ SFRs are located in Kernel Segment 1 (noncacheable) since they correspond to physical devices (peripherals); p.36 

================================================================================
3.2 An Example: "simplePIC.c" 
3.3 The Build Process 
3.7 Build Summary 
3.4 What Happens When You Reset PIC32 
3.5 Understanding "simplePIC.c"
3.5.1 Understanding PIC32 Support Libraries "xc.h" 
3.5.2 Understanding "p32mx795f512.h"
3.5.3 Microchip Software: Harmony 
3.5.4 The "NU32bootloaded.ld" Linker Script 
3.6 Bootloaded Programs vs. Standalone Programs 

================================================================================
3.8 Useful Command Line Utilities: 
	These utilities correspond to standard "GNU binary utilites" of the same name
	without the preceding "xc32-". Use "xc32-cmdname" or "xc32-cmdname --help" to 
	read about the command or reference the XC32 Compiler Reference Manual. 
	
	COMMAND 		DESCRIPTION
	=======			===========
	xc32-gcc 		XC32 version of gcc compiler: compile, assemble, link
	xc32-bin2hex	Converts .elf into .hex suitable to load into PIC32 flash mem. 
	xc32-ar 		???
	xc32-as			The assembler. 
	xc32-ld			The linker called by xc32-gcc
	xc32-nm 		Prints the symbols (e.g., global variables) in an object file. 
	xc32-objdump	Displays assembly code corresponding to an object (.o) or .elf file. 
					This process is called disassembly.
	xc32-readelf	Displays information about the .elf file