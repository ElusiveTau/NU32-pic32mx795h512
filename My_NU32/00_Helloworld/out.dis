
out.elf:     file format elf32-tradlittlemips


Disassembly of section .config_BFC02FF0:

bfc02ff0 <__config_BFC02FF0>:
bfc02ff0:	ff ff fe fa                                         ....

Disassembly of section .config_BFC02FF4:

bfc02ff4 <__config_BFC02FF4>:
bfc02ff4:	d9 79 f8 ff                                         .y..

Disassembly of section .config_BFC02FF8:

bfc02ff8 <__config_BFC02FF8>:
bfc02ff8:	db ce 6c ff                                         ..l.

Disassembly of section .config_BFC02FFC:

bfc02ffc <__config_BFC02FFC>:
bfc02ffc:	ff ff ff 7e                                         ...~

Disassembly of section .reset:

bd001970 <_reset>:
bd001970:	0f40065e 	jal	bd001978 <_startup>
bd001974:	00000000 	nop

bd001978 <_startup>:
bd001978:	401a6000 	mfc0	k0,c0_status
bd00197c:	7f5a04c0 	ext	k0,k0,0x13,0x1
bd001980:	13400005 	beqz	k0,bd001998 <_no_nmi>
bd001984:	00000000 	nop
bd001988:	3c1a9d00 	lui	k0,0x9d00
bd00198c:	275a2af4 	addiu	k0,k0,10996
bd001990:	03400008 	jr	k0
bd001994:	00000000 	nop

bd001998 <_no_nmi>:
bd001998:	3c1da002 	lui	sp,0xa002
bd00199c:	27bdfff0 	addiu	sp,sp,-16
bd0019a0:	3c1ca000 	lui	gp,0xa000
bd0019a4:	279c7ff0 	addiu	gp,gp,32752
bd0019a8:	40096002 	mfc0	t1,c0_srsctl
bd0019ac:	01205820 	add	t3,t1,zero
bd0019b0:	7d2a1e80 	ext	t2,t1,0x1a,0x4
bd0019b4:	7d494984 	ins	t1,t2,0x6,0x4
bd0019b8:	40896002 	mtc0	t1,c0_srsctl
bd0019bc:	000000c0 	ehb
bd0019c0:	41dce000 	wrpgpr	gp,gp
bd0019c4:	408b6002 	mtc0	t3,c0_srsctl
bd0019c8:	000000c0 	ehb
bd0019cc:	3c089d00 	lui	t0,0x9d00
bd0019d0:	25082b0c 	addiu	t0,t0,11020
bd0019d4:	0100f809 	jalr	t0
bd0019d8:	00000000 	nop
bd0019dc:	3c08a000 	lui	t0,0xa000
bd0019e0:	25080000 	addiu	t0,t0,0
bd0019e4:	3c09a000 	lui	t1,0xa000
bd0019e8:	25290014 	addiu	t1,t1,20
bd0019ec:	10000006 	b	bd001a08 <_bss_check>
bd0019f0:	00000000 	nop

bd0019f4 <_bss_init>:
bd0019f4:	ad000000 	sw	zero,0(t0)
bd0019f8:	ad000004 	sw	zero,4(t0)
bd0019fc:	ad000008 	sw	zero,8(t0)
bd001a00:	ad00000c 	sw	zero,12(t0)
bd001a04:	25080010 	addiu	t0,t0,16

bd001a08 <_bss_check>:
bd001a08:	0109082b 	sltu	at,t0,t1
bd001a0c:	1420fff9 	bnez	at,bd0019f4 <_bss_init>
bd001a10:	00000000 	nop

bd001a14 <_dinit_init>:
bd001a14:	3c089d00 	lui	t0,0x9d00
bd001a18:	25082ad4 	addiu	t0,t0,10964
bd001a1c:	8d090000 	lw	t1,0(t0)
bd001a20:	11200018 	beqz	t1,bd001a84 <_dinit_end+0x18>
bd001a24:	25080004 	addiu	t0,t0,4
bd001a28:	8d0a0000 	lw	t2,0(t0)
bd001a2c:	25080004 	addiu	t0,t0,4
bd001a30:	8d0b0000 	lw	t3,0(t0)
bd001a34:	11600009 	beqz	t3,bd001a5c <_dinit_clear>
bd001a38:	25080004 	addiu	t0,t0,4

bd001a3c <_dinit_copy>:
bd001a3c:	910c0000 	lbu	t4,0(t0)
bd001a40:	254affff 	addiu	t2,t2,-1
bd001a44:	25080001 	addiu	t0,t0,1
bd001a48:	a12c0000 	sb	t4,0(t1)
bd001a4c:	1540fffb 	bnez	t2,bd001a3c <_dinit_copy>
bd001a50:	25290001 	addiu	t1,t1,1
bd001a54:	10000005 	b	bd001a6c <_dinit_end>
bd001a58:	00000000 	nop

bd001a5c <_dinit_clear>:
bd001a5c:	a1200000 	sb	zero,0(t1)
bd001a60:	254affff 	addiu	t2,t2,-1
bd001a64:	1540fffd 	bnez	t2,bd001a5c <_dinit_clear>
bd001a68:	25290001 	addiu	t1,t1,1

bd001a6c <_dinit_end>:
bd001a6c:	25080003 	addiu	t0,t0,3
bd001a70:	240afffc 	li	t2,-4
bd001a74:	01484024 	and	t0,t2,t0
bd001a78:	8d090000 	lw	t1,0(t0)
bd001a7c:	1520ffe7 	bnez	t1,bd001a1c <_dinit_init+0x8>
bd001a80:	00000000 	nop
bd001a84:	3c090000 	lui	t1,0x0
bd001a88:	25290000 	addiu	t1,t1,0
bd001a8c:	11200010 	beqz	t1,bd001ad0 <_ramfunc_done>
bd001a90:	00000000 	nop
bd001a94:	3c090002 	lui	t1,0x2
bd001a98:	25290000 	addiu	t1,t1,0
bd001a9c:	3c0abf88 	lui	t2,0xbf88
bd001aa0:	254a2010 	addiu	t2,t2,8208
bd001aa4:	ad490000 	sw	t1,0(t2)
bd001aa8:	3c090002 	lui	t1,0x2
bd001aac:	25290000 	addiu	t1,t1,0
bd001ab0:	3c0abf88 	lui	t2,0xbf88
bd001ab4:	254a2020 	addiu	t2,t2,8224
bd001ab8:	ad490000 	sw	t1,0(t2)
bd001abc:	3c090002 	lui	t1,0x2
bd001ac0:	25290000 	addiu	t1,t1,0
bd001ac4:	3c0abf88 	lui	t2,0xbf88
bd001ac8:	254a2030 	addiu	t2,t2,8240
bd001acc:	ad490000 	sw	t1,0(t2)

bd001ad0 <_ramfunc_done>:
bd001ad0:	40804800 	mtc0	zero,c0_count
bd001ad4:	240affff 	li	t2,-1
bd001ad8:	408a5800 	mtc0	t2,c0_compare
bd001adc:	3c080040 	lui	t0,0x40
bd001ae0:	400a6000 	mfc0	t2,c0_status
bd001ae4:	010a5025 	or	t2,t0,t2
bd001ae8:	408a6000 	mtc0	t2,c0_status
bd001aec:	3c099d00 	lui	t1,0x9d00
bd001af0:	25290000 	addiu	t1,t1,0
bd001af4:	000000c0 	ehb
bd001af8:	40897801 	mtc0	t1,c0_ebase
bd001afc:	3c090000 	lui	t1,0x0
bd001b00:	25290001 	addiu	t1,t1,1
bd001b04:	240a0000 	li	t2,0
bd001b08:	7d2a4944 	ins	t2,t1,0x5,0x5
bd001b0c:	408a6001 	mtc0	t2,c0_intctl
bd001b10:	3c090080 	lui	t1,0x80
bd001b14:	40896800 	mtc0	t1,c0_cause
bd001b18:	40088000 	mfc0	t0,c0_config
bd001b1c:	7d090580 	ext	t1,t0,0x16,0x1
bd001b20:	00094c40 	sll	t1,t1,0x11
bd001b24:	40086000 	mfc0	t0,c0_status
bd001b28:	3c010058 	lui	at,0x58
bd001b2c:	01014024 	and	t0,t0,at
bd001b30:	01284025 	or	t0,t1,t0
bd001b34:	40886000 	mtc0	t0,c0_status
bd001b38:	000000c0 	ehb
bd001b3c:	3c089d00 	lui	t0,0x9d00
bd001b40:	25082b14 	addiu	t0,t0,11028
bd001b44:	0100f809 	jalr	t0
bd001b48:	00000000 	nop
bd001b4c:	40086000 	mfc0	t0,c0_status
bd001b50:	3c01ffbf 	lui	at,0xffbf
bd001b54:	3421ffff 	ori	at,at,0xffff
bd001b58:	01014024 	and	t0,t0,at
bd001b5c:	40886000 	mtc0	t0,c0_status
bd001b60:	30840000 	andi	a0,a0,0x0
bd001b64:	30a50000 	andi	a1,a1,0x0
bd001b68:	3c089d00 	lui	t0,0x9d00
bd001b6c:	2508292c 	addiu	t0,t0,10540
bd001b70:	01000008 	jr	t0
bd001b74:	00000000 	nop

Disassembly of section .bev_excpt:

bd001cf0 <_bev_exception>:
bd001cf0:	3c1a9d00 	lui	k0,0x9d00
bd001cf4:	275a2980 	addiu	k0,k0,10624
bd001cf8:	03400008 	jr	k0
bd001cfc:	00000000 	nop

Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:	3c1a9d00 	lui	k0,0x9d00
9d000184:	275a2764 	addiu	k0,k0,10084
9d000188:	03400008 	jr	k0
9d00018c:	00000000 	nop

Disassembly of section .vector_0:

9d000200 <__vector_dispatch_0>:
9d000200:	0b400a84 	j	9d002a10 <.LFE0>
9d000204:	00000000 	nop

Disassembly of section .vector_1:

9d000220 <__vector_dispatch_1>:
9d000220:	0b400a84 	j	9d002a10 <.LFE0>
9d000224:	00000000 	nop

Disassembly of section .vector_2:

9d000240 <__vector_dispatch_2>:
9d000240:	0b400a84 	j	9d002a10 <.LFE0>
9d000244:	00000000 	nop

Disassembly of section .vector_3:

9d000260 <__vector_dispatch_3>:
9d000260:	0b400a84 	j	9d002a10 <.LFE0>
9d000264:	00000000 	nop

Disassembly of section .vector_4:

9d000280 <__vector_dispatch_4>:
9d000280:	0b400a84 	j	9d002a10 <.LFE0>
9d000284:	00000000 	nop

Disassembly of section .vector_5:

9d0002a0 <__vector_dispatch_5>:
9d0002a0:	0b400a84 	j	9d002a10 <.LFE0>
9d0002a4:	00000000 	nop

Disassembly of section .vector_6:

9d0002c0 <__vector_dispatch_6>:
9d0002c0:	0b400a84 	j	9d002a10 <.LFE0>
9d0002c4:	00000000 	nop

Disassembly of section .vector_7:

9d0002e0 <__vector_dispatch_7>:
9d0002e0:	0b400a84 	j	9d002a10 <.LFE0>
9d0002e4:	00000000 	nop

Disassembly of section .vector_8:

9d000300 <__vector_dispatch_8>:
9d000300:	0b400a84 	j	9d002a10 <.LFE0>
9d000304:	00000000 	nop

Disassembly of section .vector_9:

9d000320 <__vector_dispatch_9>:
9d000320:	0b400a84 	j	9d002a10 <.LFE0>
9d000324:	00000000 	nop

Disassembly of section .vector_10:

9d000340 <__vector_dispatch_10>:
9d000340:	0b400a84 	j	9d002a10 <.LFE0>
9d000344:	00000000 	nop

Disassembly of section .vector_11:

9d000360 <__vector_dispatch_11>:
9d000360:	0b400a84 	j	9d002a10 <.LFE0>
9d000364:	00000000 	nop

Disassembly of section .vector_12:

9d000380 <__vector_dispatch_12>:
9d000380:	0b400a84 	j	9d002a10 <.LFE0>
9d000384:	00000000 	nop

Disassembly of section .vector_13:

9d0003a0 <__vector_dispatch_13>:
9d0003a0:	0b400a84 	j	9d002a10 <.LFE0>
9d0003a4:	00000000 	nop

Disassembly of section .vector_14:

9d0003c0 <__vector_dispatch_14>:
9d0003c0:	0b400a84 	j	9d002a10 <.LFE0>
9d0003c4:	00000000 	nop

Disassembly of section .vector_15:

9d0003e0 <__vector_dispatch_15>:
9d0003e0:	0b400a84 	j	9d002a10 <.LFE0>
9d0003e4:	00000000 	nop

Disassembly of section .vector_16:

9d000400 <__vector_dispatch_16>:
9d000400:	0b400a84 	j	9d002a10 <.LFE0>
9d000404:	00000000 	nop

Disassembly of section .vector_17:

9d000420 <__vector_dispatch_17>:
9d000420:	0b400a84 	j	9d002a10 <.LFE0>
9d000424:	00000000 	nop

Disassembly of section .vector_18:

9d000440 <__vector_dispatch_18>:
9d000440:	0b400a84 	j	9d002a10 <.LFE0>
9d000444:	00000000 	nop

Disassembly of section .vector_19:

9d000460 <__vector_dispatch_19>:
9d000460:	0b400a84 	j	9d002a10 <.LFE0>
9d000464:	00000000 	nop

Disassembly of section .vector_20:

9d000480 <__vector_dispatch_20>:
9d000480:	0b400a84 	j	9d002a10 <.LFE0>
9d000484:	00000000 	nop

Disassembly of section .vector_21:

9d0004a0 <__vector_dispatch_21>:
9d0004a0:	0b400a84 	j	9d002a10 <.LFE0>
9d0004a4:	00000000 	nop

Disassembly of section .vector_22:

9d0004c0 <__vector_dispatch_22>:
9d0004c0:	0b400a84 	j	9d002a10 <.LFE0>
9d0004c4:	00000000 	nop

Disassembly of section .vector_23:

9d0004e0 <__vector_dispatch_23>:
9d0004e0:	0b400a84 	j	9d002a10 <.LFE0>
9d0004e4:	00000000 	nop

Disassembly of section .vector_24:

9d000500 <__vector_dispatch_24>:
9d000500:	0b400a84 	j	9d002a10 <.LFE0>
9d000504:	00000000 	nop

Disassembly of section .vector_25:

9d000520 <__vector_dispatch_25>:
9d000520:	0b400a84 	j	9d002a10 <.LFE0>
9d000524:	00000000 	nop

Disassembly of section .vector_26:

9d000540 <__vector_dispatch_26>:
9d000540:	0b400896 	j	9d002258 <handle_pushbutton>
9d000544:	00000000 	nop

Disassembly of section .vector_27:

9d000560 <__vector_dispatch_27>:
9d000560:	0b400a84 	j	9d002a10 <.LFE0>
9d000564:	00000000 	nop

Disassembly of section .vector_28:

9d000580 <__vector_dispatch_28>:
9d000580:	0b400a84 	j	9d002a10 <.LFE0>
9d000584:	00000000 	nop

Disassembly of section .vector_29:

9d0005a0 <__vector_dispatch_29>:
9d0005a0:	0b400a84 	j	9d002a10 <.LFE0>
9d0005a4:	00000000 	nop

Disassembly of section .vector_30:

9d0005c0 <__vector_dispatch_30>:
9d0005c0:	0b400a84 	j	9d002a10 <.LFE0>
9d0005c4:	00000000 	nop

Disassembly of section .vector_31:

9d0005e0 <__vector_dispatch_31>:
9d0005e0:	0b400a84 	j	9d002a10 <.LFE0>
9d0005e4:	00000000 	nop

Disassembly of section .vector_32:

9d000600 <__vector_dispatch_32>:
9d000600:	0b400a84 	j	9d002a10 <.LFE0>
9d000604:	00000000 	nop

Disassembly of section .vector_33:

9d000620 <__vector_dispatch_33>:
9d000620:	0b400a84 	j	9d002a10 <.LFE0>
9d000624:	00000000 	nop

Disassembly of section .vector_34:

9d000640 <__vector_dispatch_34>:
9d000640:	0b400a84 	j	9d002a10 <.LFE0>
9d000644:	00000000 	nop

Disassembly of section .vector_35:

9d000660 <__vector_dispatch_35>:
9d000660:	0b400a84 	j	9d002a10 <.LFE0>
9d000664:	00000000 	nop

Disassembly of section .vector_36:

9d000680 <__vector_dispatch_36>:
9d000680:	0b400a84 	j	9d002a10 <.LFE0>
9d000684:	00000000 	nop

Disassembly of section .vector_37:

9d0006a0 <__vector_dispatch_37>:
9d0006a0:	0b400a84 	j	9d002a10 <.LFE0>
9d0006a4:	00000000 	nop

Disassembly of section .vector_38:

9d0006c0 <__vector_dispatch_38>:
9d0006c0:	0b400a84 	j	9d002a10 <.LFE0>
9d0006c4:	00000000 	nop

Disassembly of section .vector_39:

9d0006e0 <__vector_dispatch_39>:
9d0006e0:	0b400a84 	j	9d002a10 <.LFE0>
9d0006e4:	00000000 	nop

Disassembly of section .vector_40:

9d000700 <__vector_dispatch_40>:
9d000700:	0b400a84 	j	9d002a10 <.LFE0>
9d000704:	00000000 	nop

Disassembly of section .vector_41:

9d000720 <__vector_dispatch_41>:
9d000720:	0b400a84 	j	9d002a10 <.LFE0>
9d000724:	00000000 	nop

Disassembly of section .vector_42:

9d000740 <__vector_dispatch_42>:
9d000740:	0b400a84 	j	9d002a10 <.LFE0>
9d000744:	00000000 	nop

Disassembly of section .vector_43:

9d000760 <__vector_dispatch_43>:
9d000760:	0b400a84 	j	9d002a10 <.LFE0>
9d000764:	00000000 	nop

Disassembly of section .vector_44:

9d000780 <__vector_dispatch_44>:
9d000780:	0b400a84 	j	9d002a10 <.LFE0>
9d000784:	00000000 	nop

Disassembly of section .vector_45:

9d0007a0 <__vector_dispatch_45>:
9d0007a0:	0b400a84 	j	9d002a10 <.LFE0>
9d0007a4:	00000000 	nop

Disassembly of section .vector_46:

9d0007c0 <__vector_dispatch_46>:
9d0007c0:	0b400a84 	j	9d002a10 <.LFE0>
9d0007c4:	00000000 	nop

Disassembly of section .vector_47:

9d0007e0 <__vector_dispatch_47>:
9d0007e0:	0b400a84 	j	9d002a10 <.LFE0>
9d0007e4:	00000000 	nop

Disassembly of section .vector_48:

9d000800 <__vector_dispatch_48>:
9d000800:	0b400a84 	j	9d002a10 <.LFE0>
9d000804:	00000000 	nop

Disassembly of section .vector_49:

9d000820 <__vector_dispatch_49>:
9d000820:	0b400a84 	j	9d002a10 <.LFE0>
9d000824:	00000000 	nop

Disassembly of section .vector_50:

9d000840 <__vector_dispatch_50>:
9d000840:	0b400a84 	j	9d002a10 <.LFE0>
9d000844:	00000000 	nop

Disassembly of section .vector_51:

9d000860 <__vector_dispatch_51>:
9d000860:	0b400a84 	j	9d002a10 <.LFE0>
9d000864:	00000000 	nop

Disassembly of section ._debug_exception:

bfc00480 <__DbgExecReturn>:
bfc00480:	409bf800 	mtc0	k1,c0_desave
bfc00484:	000000c0 	ehb
bfc00488:	3c1b9d00 	lui	k1,0x9d00
bfc0048c:	277b2a58 	addiu	k1,k1,10840
bfc00490:	13600002 	beqz	k1,bfc0049c <__DbgExecReturn+0x1c>
bfc00494:	00000000 	nop
bfc00498:	409bc000 	mtc0	k1,c0_depc
bfc0049c:	401bf800 	mfc0	k1,c0_desave
bfc004a0:	000000c0 	ehb
bfc004a4:	4200001f 	deret
bfc004a8:	00000000 	nop

Disassembly of section .text:

9d001e00 <LCD_Read-0x1c>:

// wait for the peripheral master port (PMP) to be ready
// should be called before every read and write operation
static void waitPMP(void)
{
  while(PMMODEbits.BUSY) { ; }
9d001e00:	3c03bf80 	lui	v1,0xbf80
9d001e04:	8c627010 	lw	v0,28688(v1)
9d001e08:	30428000 	andi	v0,v0,0x8000
9d001e0c:	1440fffd 	bnez	v0,9d001e04 <__vector_dispatch_51+0x15a4>
9d001e10:	00000000 	nop
}
9d001e14:	03e00008 	jr	ra
9d001e18:	00000000 	nop

9d001e1c <LCD_Read>:
  PMDIN = data;        // send the data
}

// read data from the LCD.  
// rs : the value of the RS signal 0 for instructions status, 1 for data
unsigned char LCD_Read(int rs) {
9d001e1c:	27bdffe0 	addiu	sp,sp,-32
9d001e20:	afbf001c 	sw	ra,28(sp)
9d001e24:	afb00018 	sw	s0,24(sp)
  volatile unsigned char val = 0; // volatile so 1st read doesn't get optimized away
9d001e28:	a3a00010 	sb	zero,16(sp)
  if(rs) { // 1 to read data
9d001e2c:	10800005 	beqz	a0,9d001e44 <LCD_Read+0x28>
9d001e30:	24030400 	li	v1,1024
    PMADDRSET = 1 << PMABIT;
9d001e34:	3c02bf80 	lui	v0,0xbf80
9d001e38:	ac437028 	sw	v1,28712(v0)
9d001e3c:	0b400793 	j	9d001e4c <LCD_Read+0x30>
9d001e40:	00000000 	nop
  } else { // 0 to read command status
    PMADDRCLR = 1 << PMABIT;
9d001e44:	3c02bf80 	lui	v0,0xbf80
9d001e48:	ac437024 	sw	v1,28708(v0)
  }
  // from the PIC32 reference manual, you must read twice to actually get the data
  waitPMP();                  // wait for the PMP to be ready
9d001e4c:	0f400780 	jal	9d001e00 <__vector_dispatch_51+0x15a0>
9d001e50:	3c10bf80 	lui	s0,0xbf80
  val = PMDIN;
9d001e54:	8e027040 	lw	v0,28736(s0)
9d001e58:	304200ff 	andi	v0,v0,0xff
9d001e5c:	a3a20010 	sb	v0,16(sp)
  waitPMP();
9d001e60:	0f400780 	jal	9d001e00 <__vector_dispatch_51+0x15a0>
9d001e64:	00000000 	nop
  val = PMDIN;
9d001e68:	8e027040 	lw	v0,28736(s0)
9d001e6c:	304200ff 	andi	v0,v0,0xff
9d001e70:	a3a20010 	sb	v0,16(sp)
  return val;
9d001e74:	93a20010 	lbu	v0,16(sp)
}
9d001e78:	304200ff 	andi	v0,v0,0xff
9d001e7c:	8fbf001c 	lw	ra,28(sp)
9d001e80:	8fb00018 	lw	s0,24(sp)
9d001e84:	03e00008 	jr	ra
9d001e88:	27bd0020 	addiu	sp,sp,32

9d001e8c <LCD_Write>:
}

// Write data to the LCD and wait for it to finish by checking the busy flag. 
// rs : the value of the RS signal, 0 for an instruction 1 for data
// data : the byte to send
void LCD_Write(int rs, unsigned char data) {
9d001e8c:	27bdffd8 	addiu	sp,sp,-40
9d001e90:	afbf0024 	sw	ra,36(sp)
9d001e94:	afb10020 	sw	s1,32(sp)
9d001e98:	afb0001c 	sw	s0,28(sp)
9d001e9c:	00808021 	move	s0,a0
9d001ea0:	30b100ff 	andi	s1,a1,0xff
}

// wait for the LCD to finish its command.
// We check this by reading from the LCD
static void waitLCD() {
  volatile unsigned char val = 0x80;
9d001ea4:	2402ff80 	li	v0,-128
9d001ea8:	a3a20010 	sb	v0,16(sp)
  
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
9d001eac:	93a20010 	lbu	v0,16(sp)
9d001eb0:	7c021420 	seb	v0,v0
9d001eb4:	04410008 	bgez	v0,9d001ed8 <LCD_Write+0x4c>
9d001eb8:	24020032 	li	v0,50
    val = LCD_Read(0);
9d001ebc:	0f400787 	jal	9d001e1c <LCD_Read>
9d001ec0:	00002021 	move	a0,zero
9d001ec4:	a3a20010 	sb	v0,16(sp)
// We check this by reading from the LCD
static void waitLCD() {
  volatile unsigned char val = 0x80;
  
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
9d001ec8:	93a20010 	lbu	v0,16(sp)
9d001ecc:	7c021420 	seb	v0,v0
9d001ed0:	0440fffa 	bltz	v0,9d001ebc <LCD_Write+0x30>
9d001ed4:	24020032 	li	v0,50
    val = LCD_Read(0);
  }
  int i = 0;
  for(i = 0; i < 50; ++i) { // slight delay
    _nop();
9d001ed8:	00000040 	ssnop
9d001edc:	2442ffff 	addiu	v0,v0,-1
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
    val = LCD_Read(0);
  }
  int i = 0;
  for(i = 0; i < 50; ++i) { // slight delay
9d001ee0:	1440fffd 	bnez	v0,9d001ed8 <LCD_Write+0x4c>
9d001ee4:	00000000 	nop
// Write data to the LCD and wait for it to finish by checking the busy flag. 
// rs : the value of the RS signal, 0 for an instruction 1 for data
// data : the byte to send
void LCD_Write(int rs, unsigned char data) {
  waitLCD();           // wait for the LCD to be ready
  if(rs) { // 1 for data
9d001ee8:	12000004 	beqz	s0,9d001efc <LCD_Write+0x70>
9d001eec:	24030400 	li	v1,1024
    PMADDRSET = 1 << PMABIT;
9d001ef0:	3c02bf80 	lui	v0,0xbf80
9d001ef4:	0b4007c1 	j	9d001f04 <LCD_Write+0x78>
9d001ef8:	ac437028 	sw	v1,28712(v0)
  } else { // 0 for command
    PMADDRCLR = 1 << PMABIT; 
9d001efc:	3c02bf80 	lui	v0,0xbf80
9d001f00:	ac437024 	sw	v1,28708(v0)
  }
  waitPMP();           // Wait for the PMP to be ready
9d001f04:	0f400780 	jal	9d001e00 <__vector_dispatch_51+0x15a0>
9d001f08:	00000000 	nop
  PMDIN = data;        // send the data
9d001f0c:	3c02bf80 	lui	v0,0xbf80
9d001f10:	ac517040 	sw	s1,28736(v0)
}
9d001f14:	0b4007c7 	j	9d001f1c <LCD_Write+0x90>
9d001f18:	8fbf0024 	lw	ra,36(sp)
9d001f1c:	8fb10020 	lw	s1,32(sp)
9d001f20:	8fb0001c 	lw	s0,28(sp)
9d001f24:	03e00008 	jr	ra
9d001f28:	27bd0028 	addiu	sp,sp,40

9d001f2c <LCD_Clear>:
    __builtin_enable_interrupts();
  }
}

// Clears the display and returns to the home position (0,0)
void LCD_Clear(void) {
9d001f2c:	27bdffe8 	addiu	sp,sp,-24
9d001f30:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x01); //clear the whole screen
9d001f34:	00002021 	move	a0,zero
9d001f38:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d001f3c:	24050001 	li	a1,1
}
9d001f40:	8fbf0014 	lw	ra,20(sp)
9d001f44:	03e00008 	jr	ra
9d001f48:	27bd0018 	addiu	sp,sp,24

9d001f4c <LCD_Home>:

// Return the cursor and display to the home position (0,0)
void LCD_Home(void) {
9d001f4c:	27bdffe8 	addiu	sp,sp,-24
9d001f50:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x02);
9d001f54:	00002021 	move	a0,zero
9d001f58:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d001f5c:	24050002 	li	a1,2
}
9d001f60:	8fbf0014 	lw	ra,20(sp)
9d001f64:	03e00008 	jr	ra
9d001f68:	27bd0018 	addiu	sp,sp,24

9d001f6c <LCD_Entry>:

// Issue the LCD entry mode set command
// This tells the LCD what to do after writing a character
// id : 1 increment cursor, 0 decrement cursor
// s : 1 shift display right, 0 don't shift display
void LCD_Entry(int id, int s) {
9d001f6c:	27bdffe8 	addiu	sp,sp,-24
9d001f70:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x04 | (id << 1) | s);
9d001f74:	34a50004 	ori	a1,a1,0x4
9d001f78:	00042040 	sll	a0,a0,0x1
9d001f7c:	00a42825 	or	a1,a1,a0
9d001f80:	00002021 	move	a0,zero
9d001f84:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d001f88:	30a500ff 	andi	a1,a1,0xff
}
9d001f8c:	8fbf0014 	lw	ra,20(sp)
9d001f90:	03e00008 	jr	ra
9d001f94:	27bd0018 	addiu	sp,sp,24

9d001f98 <LCD_Display>:
// Issue the LCD Display command
// Changes display settings
// d : 1 display on, 0 display off
// c : 1 cursor on, 0 cursor off
// b : 1 cursor blinks, 0 cursor doesn't blink
void LCD_Display(int d, int c, int b) {
9d001f98:	27bdffe8 	addiu	sp,sp,-24
9d001f9c:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d001fa0:	34c60008 	ori	a2,a2,0x8
9d001fa4:	00052840 	sll	a1,a1,0x1
9d001fa8:	00c53025 	or	a2,a2,a1
9d001fac:	00042080 	sll	a0,a0,0x2
9d001fb0:	00c42825 	or	a1,a2,a0
9d001fb4:	00002021 	move	a0,zero
9d001fb8:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d001fbc:	30a500ff 	andi	a1,a1,0xff
}
9d001fc0:	8fbf0014 	lw	ra,20(sp)
9d001fc4:	03e00008 	jr	ra
9d001fc8:	27bd0018 	addiu	sp,sp,24

9d001fcc <LCD_Shift>:

// Issue the LCD display shift command
// Move the cursor or the display right or left
// sc : 0 shift cursor, 1 shift display
// rl : 0 to the left, 1 to the right
void LCD_Shift(int sc, int rl) {
9d001fcc:	27bdffe8 	addiu	sp,sp,-24
9d001fd0:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x1 | (sc << 3) | (rl << 2));
9d001fd4:	00052880 	sll	a1,a1,0x2
9d001fd8:	34a50001 	ori	a1,a1,0x1
9d001fdc:	000420c0 	sll	a0,a0,0x3
9d001fe0:	00a42825 	or	a1,a1,a0
9d001fe4:	00002021 	move	a0,zero
9d001fe8:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d001fec:	30a500fd 	andi	a1,a1,0xfd
}
9d001ff0:	8fbf0014 	lw	ra,20(sp)
9d001ff4:	03e00008 	jr	ra
9d001ff8:	27bd0018 	addiu	sp,sp,24

9d001ffc <LCD_Function>:
// Issue the LCD Functions set command
// This controls some LCD settings
// You may want to clear the screen after calling this
// n : 0 one line, 1 two lines
// f : 0 small font, 1 large font (only if n == 0)
void LCD_Function(int n, int f) {
9d001ffc:	27bdffe8 	addiu	sp,sp,-24
9d002000:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d002004:	00052880 	sll	a1,a1,0x2
9d002008:	34a50030 	ori	a1,a1,0x30
9d00200c:	000420c0 	sll	a0,a0,0x3
9d002010:	00a42825 	or	a1,a1,a0
9d002014:	00002021 	move	a0,zero
9d002018:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d00201c:	30a500fc 	andi	a1,a1,0xfc
}
9d002020:	8fbf0014 	lw	ra,20(sp)
9d002024:	03e00008 	jr	ra
9d002028:	27bd0018 	addiu	sp,sp,24

9d00202c <LCD_Move>:

// Move the cursor to the desired line and column
// Does this by issuing a DDRAM Move instruction
// line : line 0 or line 1
// col  : the desired column
void LCD_Move(int line, int col) {
9d00202c:	27bdffe8 	addiu	sp,sp,-24
9d002030:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x80 | (line << 6) | col);
9d002034:	2402ff80 	li	v0,-128
9d002038:	00a22825 	or	a1,a1,v0
9d00203c:	00042180 	sll	a0,a0,0x6
9d002040:	00a42825 	or	a1,a1,a0
9d002044:	00002021 	move	a0,zero
9d002048:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d00204c:	30a500ff 	andi	a1,a1,0xff
}
9d002050:	8fbf0014 	lw	ra,20(sp)
9d002054:	03e00008 	jr	ra
9d002058:	27bd0018 	addiu	sp,sp,24

9d00205c <LCD_CMove>:

// Sets the CGRAM address, used for creating custom
// characters
// addr address in the CGRAM to make current
void LCD_CMove(unsigned char addr) {
9d00205c:	27bdffe8 	addiu	sp,sp,-24
9d002060:	afbf0014 	sw	ra,20(sp)
9d002064:	308500ff 	andi	a1,a0,0xff
  LCD_Write(0, 0x40 | addr);
9d002068:	00002021 	move	a0,zero
9d00206c:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d002070:	34a50040 	ori	a1,a1,0x40
}
9d002074:	8fbf0014 	lw	ra,20(sp)
9d002078:	03e00008 	jr	ra
9d00207c:	27bd0018 	addiu	sp,sp,24

9d002080 <LCD_WriteChar>:

// Writes the character to the LCD at the current position
void LCD_WriteChar(char c) {         
9d002080:	27bdffe8 	addiu	sp,sp,-24
9d002084:	afbf0014 	sw	ra,20(sp)
  LCD_Write(1, c); 
9d002088:	308500ff 	andi	a1,a0,0xff
9d00208c:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d002090:	24040001 	li	a0,1
}
9d002094:	8fbf0014 	lw	ra,20(sp)
9d002098:	03e00008 	jr	ra
9d00209c:	27bd0018 	addiu	sp,sp,24

9d0020a0 <LCD_WriteString>:

// Write a string to the LCD starting at the current cursor
void LCD_WriteString(const char *str) {
9d0020a0:	27bdffe8 	addiu	sp,sp,-24
9d0020a4:	afbf0014 	sw	ra,20(sp)
9d0020a8:	afb00010 	sw	s0,16(sp)
9d0020ac:	00808021 	move	s0,a0
  while(*str) {
9d0020b0:	80840000 	lb	a0,0(a0)
9d0020b4:	10800006 	beqz	a0,9d0020d0 <LCD_WriteString+0x30>
9d0020b8:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
9d0020bc:	0f400820 	jal	9d002080 <LCD_WriteChar>
9d0020c0:	26100001 	addiu	s0,s0,1
  LCD_Write(1, c); 
}

// Write a string to the LCD starting at the current cursor
void LCD_WriteString(const char *str) {
  while(*str) {
9d0020c4:	82040000 	lb	a0,0(s0)
9d0020c8:	1480fffc 	bnez	a0,9d0020bc <LCD_WriteString+0x1c>
9d0020cc:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
    ++str;
  }
}
9d0020d0:	8fb00010 	lw	s0,16(sp)
9d0020d4:	03e00008 	jr	ra
9d0020d8:	27bd0018 	addiu	sp,sp,24

9d0020dc <LCD_CustomChar>:
// Make val a custom character.  This only implements 
// The small font version
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
9d0020dc:	27bdffd8 	addiu	sp,sp,-40
9d0020e0:	afbf0024 	sw	ra,36(sp)
9d0020e4:	afb30020 	sw	s3,32(sp)
9d0020e8:	afb2001c 	sw	s2,28(sp)
9d0020ec:	afb10018 	sw	s1,24(sp)
9d0020f0:	afb00014 	sw	s0,20(sp)
9d0020f4:	00a09821 	move	s3,a1
  int i = 0;
  for(i = 0; i < 7; ++i) {
    LCD_CMove(((val & 7) << 2) | i);
9d0020f8:	30840007 	andi	a0,a0,0x7
9d0020fc:	00049080 	sll	s2,a0,0x2
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
  int i = 0;
  for(i = 0; i < 7; ++i) {
9d002100:	00008021 	move	s0,zero
9d002104:	24110007 	li	s1,7
    LCD_CMove(((val & 7) << 2) | i);
9d002108:	02502025 	or	a0,s2,s0
9d00210c:	0f400817 	jal	9d00205c <LCD_CMove>
9d002110:	308400ff 	andi	a0,a0,0xff
9d002114:	02701021 	addu	v0,s3,s0
    LCD_Write(1, data[i]);
9d002118:	24040001 	li	a0,1
9d00211c:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d002120:	90450000 	lbu	a1,0(v0)
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
  int i = 0;
  for(i = 0; i < 7; ++i) {
9d002124:	26100001 	addiu	s0,s0,1
9d002128:	1611fff8 	bne	s0,s1,9d00210c <LCD_CustomChar+0x30>
9d00212c:	02502025 	or	a0,s2,s0
    LCD_CMove(((val & 7) << 2) | i);
    LCD_Write(1, data[i]);
  }
}
9d002130:	8fbf0024 	lw	ra,36(sp)
9d002134:	8fb30020 	lw	s3,32(sp)
9d002138:	8fb2001c 	lw	s2,28(sp)
9d00213c:	8fb10018 	lw	s1,24(sp)
9d002140:	8fb00014 	lw	s0,20(sp)
9d002144:	03e00008 	jr	ra
9d002148:	27bd0028 	addiu	sp,sp,40

9d00214c <LCD_Setup>:
// pins RE0 - RE7 (PMD0 - PMD7) connect to LCD pins D0 - D7
// pin RD4 (PMENB) connects to LCD pin E
// pin RD5 (PMRD/PMWR) Connects to LCD pin R/W
// pin RB13 (PMA10) Connects to RS.
// interrupts will be disabled while this function executes
void LCD_Setup() {
9d00214c:	27bdffe8 	addiu	sp,sp,-24
9d002150:	afbf0014 	sw	ra,20(sp)
9d002154:	afb00010 	sw	s0,16(sp)
  int en = __builtin_disable_interrupts();  // disable interrupts, remember initial state
9d002158:	41706000 	di	s0
9d00215c:	000000c0 	ehb
  
  IEC1bits.PMPIE = 0;    // disable PMP interrupts
9d002160:	3c02bf88 	lui	v0,0xbf88
9d002164:	8c431070 	lw	v1,4208(v0)
9d002168:	7c031084 	ins	v1,zero,0x2,0x1
9d00216c:	ac431070 	sw	v1,4208(v0)
  PMCON = 0;             // clear PMCON, like it is on reset
9d002170:	3c02bf80 	lui	v0,0xbf80
9d002174:	ac407000 	sw	zero,28672(v0)
  PMCONbits.PTWREN = 1;  // PMENB strobe enabled
9d002178:	3c02bf80 	lui	v0,0xbf80
9d00217c:	94437000 	lhu	v1,28672(v0)
9d002180:	24040001 	li	a0,1
9d002184:	7c834a44 	ins	v1,a0,0x9,0x1
9d002188:	a4437000 	sh	v1,28672(v0)
  PMCONbits.PTRDEN = 1;  // PMRD/PMWR enabled
9d00218c:	94437000 	lhu	v1,28672(v0)
9d002190:	7c834204 	ins	v1,a0,0x8,0x1
9d002194:	a4437000 	sh	v1,28672(v0)
  PMCONbits.WRSP = 1;    // Read/write strobe is active high
9d002198:	94437000 	lhu	v1,28672(v0)
9d00219c:	7c830844 	ins	v1,a0,0x1,0x1
9d0021a0:	a4437000 	sh	v1,28672(v0)
  PMCONbits.RDSP = 1;    // Read/write strobe is active high
9d0021a4:	94437000 	lhu	v1,28672(v0)
9d0021a8:	7c830004 	ins	v1,a0,0x0,0x1
9d0021ac:	a4437000 	sh	v1,28672(v0)

  PMMODE = 0;            // clear PMMODE like it is on reset
9d0021b0:	3c03bf80 	lui	v1,0xbf80
9d0021b4:	ac607010 	sw	zero,28688(v1)
  PMMODEbits.MODE = 0x3; // set master mode 1, which uses a single strobe
9d0021b8:	3c03bf80 	lui	v1,0xbf80
9d0021bc:	94657010 	lhu	a1,28688(v1)
9d0021c0:	24060003 	li	a2,3
9d0021c4:	7cc54a04 	ins	a1,a2,0x8,0x2
9d0021c8:	a4657010 	sh	a1,28688(v1)
  // The cycle is started when reading from or writing to the PMDIN SFR.
  // Note that the wait states for writes start with minimum of 1 (except WAITE)
  // We add some extra wait states to make sure we meet the time and
  // account for variations in timing amongst different HD44780 compatible parts.
  // The timing we use here is for the KS066U which is faster than the HD44780.
  PMMODEbits.WAITB = 0x3;  // Tas in the LCD datasheet is 60 ns 
9d0021cc:	94657010 	lhu	a1,28688(v1)
9d0021d0:	7cc53984 	ins	a1,a2,0x6,0x2
9d0021d4:	a4657010 	sh	a1,28688(v1)
  PMMODEbits.WAITM = 0xF;  // PWeh in the data sheet is 230 ns (we don't quite meet this)
9d0021d8:	94657010 	lhu	a1,28688(v1)
9d0021dc:	2406000f 	li	a2,15
9d0021e0:	7cc52884 	ins	a1,a2,0x2,0x4
9d0021e4:	a4657010 	sh	a1,28688(v1)
                           // If not working for your LCD you may need to reduce PBCLK
  PMMODEbits.WAITE = 0x1;  // after E is low wait Tah (10ns)
9d0021e8:	94657010 	lhu	a1,28688(v1)
9d0021ec:	7c850804 	ins	a1,a0,0x0,0x2
9d0021f0:	a4657010 	sh	a1,28688(v1)

  PMAEN |= 1 << PMABIT;   // PMA is an address line
9d0021f4:	3c03bf80 	lui	v1,0xbf80
9d0021f8:	8c657050 	lw	a1,28752(v1)
9d0021fc:	34a50400 	ori	a1,a1,0x400
9d002200:	ac657050 	sw	a1,28752(v1)
  
  PMCONbits.ON = 1;        // enable the PMP peripheral
9d002204:	94437000 	lhu	v1,28672(v0)
9d002208:	7c837bc4 	ins	v1,a0,0xf,0x1
9d00220c:	a4437000 	sh	v1,28672(v0)
// This controls some LCD settings
// You may want to clear the screen after calling this
// n : 0 one line, 1 two lines
// f : 0 small font, 1 large font (only if n == 0)
void LCD_Function(int n, int f) {
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d002210:	00002021 	move	a0,zero
9d002214:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d002218:	24050038 	li	a1,56
// Changes display settings
// d : 1 display on, 0 display off
// c : 1 cursor on, 0 cursor off
// b : 1 cursor blinks, 0 cursor doesn't blink
void LCD_Display(int d, int c, int b) {
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d00221c:	00002021 	move	a0,zero
9d002220:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d002224:	2405000c 	li	a1,12
  
  PMCONbits.ON = 1;        // enable the PMP peripheral
  // perform the initialization sequence
  LCD_Function(1,0);       // 2 line mode, small font
  LCD_Display(1, 0, 0);    // Display control: display on, cursor off, blinking cursor off
  LCD_Clear();             // clear the LCD 
9d002228:	0f4007cb 	jal	9d001f2c <LCD_Clear>
9d00222c:	32100001 	andi	s0,s0,0x1
// Issue the LCD entry mode set command
// This tells the LCD what to do after writing a character
// id : 1 increment cursor, 0 decrement cursor
// s : 1 shift display right, 0 don't shift display
void LCD_Entry(int id, int s) {
  LCD_Write(0, 0x04 | (id << 1) | s);
9d002230:	00002021 	move	a0,zero
9d002234:	0f4007a3 	jal	9d001e8c <LCD_Write>
9d002238:	24050006 	li	a1,6
  LCD_Function(1,0);       // 2 line mode, small font
  LCD_Display(1, 0, 0);    // Display control: display on, cursor off, blinking cursor off
  LCD_Clear();             // clear the LCD 
  LCD_Entry(1, 0);         // Cursor moves left to right. do not shift the display
  
  if(en & 0x1)             // if interrupts were enabled before, re-enable them
9d00223c:	12000003 	beqz	s0,9d00224c <LCD_Setup+0x100>
9d002240:	8fbf0014 	lw	ra,20(sp)
  {
    __builtin_enable_interrupts();
9d002244:	41626020 	ei	v0
  }
}
9d002248:	8fbf0014 	lw	ra,20(sp)
9d00224c:	8fb00010 	lw	s0,16(sp)
9d002250:	03e00008 	jr	ra
9d002254:	27bd0018 	addiu	sp,sp,24

9d002258 <handle_pushbutton>:

volatile unsigned int oldD = 0, newD = 0; 
volatile unsigned int oldC = 0, newC = 0; 

void __ISR(_CHANGE_NOTICE_VECTOR, IPL5SOFT) handle_pushbutton(void)
{
9d002258:	415de800 	rdpgpr	sp,sp
9d00225c:	401a7000 	mfc0	k0,c0_epc
9d002260:	401b6000 	mfc0	k1,c0_status
9d002264:	27bdff90 	addiu	sp,sp,-112
9d002268:	afba006c 	sw	k0,108(sp)
9d00226c:	401a6002 	mfc0	k0,c0_srsctl
9d002270:	afbb0068 	sw	k1,104(sp)
9d002274:	afba0064 	sw	k0,100(sp)
9d002278:	7c1b7844 	ins	k1,zero,0x1,0xf
9d00227c:	377b1400 	ori	k1,k1,0x1400
9d002280:	409b6000 	mtc0	k1,c0_status
9d002284:	afbf0054 	sw	ra,84(sp)
9d002288:	afb90050 	sw	t9,80(sp)
9d00228c:	afb8004c 	sw	t8,76(sp)
9d002290:	afaf0048 	sw	t7,72(sp)
9d002294:	afae0044 	sw	t6,68(sp)
9d002298:	afad0040 	sw	t5,64(sp)
9d00229c:	afac003c 	sw	t4,60(sp)
9d0022a0:	afab0038 	sw	t3,56(sp)
9d0022a4:	afaa0034 	sw	t2,52(sp)
9d0022a8:	afa90030 	sw	t1,48(sp)
9d0022ac:	afa8002c 	sw	t0,44(sp)
9d0022b0:	afa70028 	sw	a3,40(sp)
9d0022b4:	afa60024 	sw	a2,36(sp)
9d0022b8:	afa50020 	sw	a1,32(sp)
9d0022bc:	afa4001c 	sw	a0,28(sp)
9d0022c0:	afa30018 	sw	v1,24(sp)
9d0022c4:	afa20014 	sw	v0,20(sp)
9d0022c8:	afa10010 	sw	at,16(sp)
9d0022cc:	00001012 	mflo	v0
9d0022d0:	afa2005c 	sw	v0,92(sp)
9d0022d4:	00001810 	mfhi	v1
9d0022d8:	afa30058 	sw	v1,88(sp)
	static volatile int triggered_count = 0; 	
	static char buf[LCD_MAX_DIG_WIDTH];
	
	triggered_count++; 
9d0022dc:	8f828010 	lw	v0,-32752(gp)
9d0022e0:	24420001 	addiu	v0,v0,1
9d0022e4:	af828010 	sw	v0,-32752(gp)
	//Location 1. Clear flag
	//IFS1bits.CNIF = 0; //Clear interrupt flag
	//NU32_WriteUART3("Inside ISR");
	
	//Location 2. Clear flag
	IFS1bits.CNIF = 0; 
9d0022e8:	3c02bf88 	lui	v0,0xbf88
9d0022ec:	8c431040 	lw	v1,4160(v0)
9d0022f0:	7c030004 	ins	v1,zero,0x0,0x1
9d0022f4:	ac431040 	sw	v1,4160(v0)
	
	LCD_Clear();
9d0022f8:	0f4007cb 	jal	9d001f2c <LCD_Clear>
9d0022fc:	00000000 	nop
	LCD_Move(0,0);
9d002300:	00002021 	move	a0,zero
9d002304:	0f40080b 	jal	9d00202c <LCD_Move>
9d002308:	00002821 	move	a1,zero
	LCD_WriteString("CN:");
9d00230c:	3c049d00 	lui	a0,0x9d00
9d002310:	0f400828 	jal	9d0020a0 <LCD_WriteString>
9d002314:	24842a9c 	addiu	a0,a0,10908
	LCD_WriteString(itoa(buf,triggered_count,10));
9d002318:	8f858010 	lw	a1,-32752(gp)
9d00231c:	3c04a000 	lui	a0,0xa000
9d002320:	24840014 	addiu	a0,a0,20
9d002324:	0f400a10 	jal	9d002840 <itoa>
9d002328:	2406000a 	li	a2,10
9d00232c:	0f400828 	jal	9d0020a0 <LCD_WriteString>
9d002330:	00402021 	move	a0,v0
	
	
	//Read pin states from ports C,D
	newC = PORTC; 
9d002334:	3c02bf88 	lui	v0,0xbf88
9d002338:	8c426090 	lw	v0,24720(v0)
9d00233c:	af828014 	sw	v0,-32748(gp)
	newD = PORTD;
9d002340:	3c02bf88 	lui	v0,0xbf88
9d002344:	8c4260d0 	lw	v0,24784(v0)
9d002348:	af82801c 	sw	v0,-32740(gp)
	
	if( (newC >> 14 & 1) )
9d00234c:	8f828014 	lw	v0,-32748(gp)
9d002350:	7c420380 	ext	v0,v0,0xe,0x1
9d002354:	10400006 	beqz	v0,9d002370 <handle_pushbutton+0x118>
9d002358:	3c02bf88 	lui	v0,0xbf88
		GLED(On); 
9d00235c:	94436060 	lhu	v1,24672(v0)
9d002360:	7c030844 	ins	v1,zero,0x1,0x1
9d002364:	a4436060 	sh	v1,24672(v0)
9d002368:	0b4008e0 	j	9d002380 <handle_pushbutton+0x128>
9d00236c:	00000000 	nop
	else
		GLED(Off);
9d002370:	94436060 	lhu	v1,24672(v0)
9d002374:	24040001 	li	a0,1
9d002378:	7c830844 	ins	v1,a0,0x1,0x1
9d00237c:	a4436060 	sh	v1,24672(v0)
	
	//Save new input values
	oldC = newC; 
9d002380:	8f828014 	lw	v0,-32748(gp)
9d002384:	af828018 	sw	v0,-32744(gp)
	oldD = newD; 
9d002388:	8f82801c 	lw	v0,-32740(gp)
9d00238c:	af828020 	sw	v0,-32736(gp)
	
	NU32_WriteUART3("Done ISR.");
9d002390:	3c049d00 	lui	a0,0x9d00
9d002394:	0f4009ca 	jal	9d002728 <NU32_WriteUART3>
9d002398:	24842aa0 	addiu	a0,a0,10912
	//Location 3. Clear flag
	//IFS1bits.CNIF = 0; //Clear interrupt flag
}
9d00239c:	8fa2005c 	lw	v0,92(sp)
9d0023a0:	00400013 	mtlo	v0
9d0023a4:	8fa30058 	lw	v1,88(sp)
9d0023a8:	00600011 	mthi	v1
9d0023ac:	8fbf0054 	lw	ra,84(sp)
9d0023b0:	8fb90050 	lw	t9,80(sp)
9d0023b4:	8fb8004c 	lw	t8,76(sp)
9d0023b8:	8faf0048 	lw	t7,72(sp)
9d0023bc:	8fae0044 	lw	t6,68(sp)
9d0023c0:	8fad0040 	lw	t5,64(sp)
9d0023c4:	8fac003c 	lw	t4,60(sp)
9d0023c8:	8fab0038 	lw	t3,56(sp)
9d0023cc:	8faa0034 	lw	t2,52(sp)
9d0023d0:	8fa90030 	lw	t1,48(sp)
9d0023d4:	8fa8002c 	lw	t0,44(sp)
9d0023d8:	8fa70028 	lw	a3,40(sp)
9d0023dc:	8fa60024 	lw	a2,36(sp)
9d0023e0:	8fa50020 	lw	a1,32(sp)
9d0023e4:	8fa4001c 	lw	a0,28(sp)
9d0023e8:	8fa30018 	lw	v1,24(sp)
9d0023ec:	8fa20014 	lw	v0,20(sp)
9d0023f0:	8fa10010 	lw	at,16(sp)
9d0023f4:	41606000 	di
9d0023f8:	000000c0 	ehb
9d0023fc:	8fba006c 	lw	k0,108(sp)
9d002400:	8fbb0068 	lw	k1,104(sp)
9d002404:	409a7000 	mtc0	k0,c0_epc
9d002408:	8fba0064 	lw	k0,100(sp)
9d00240c:	27bd0070 	addiu	sp,sp,112
9d002410:	409a6002 	mtc0	k0,c0_srsctl
9d002414:	41dde800 	wrpgpr	sp,sp
9d002418:	409b6000 	mtc0	k1,c0_status
9d00241c:	42000018 	eret

9d002420 <init_status_leds>:
}

void init_status_leds(void)
{
	//Designate port pins as outputs
	TRISBbits.TRISB1 = 0; 
9d002420:	3c02bf88 	lui	v0,0xbf88
9d002424:	94436040 	lhu	v1,24640(v0)
9d002428:	7c030844 	ins	v1,zero,0x1,0x1
9d00242c:	a4436040 	sh	v1,24640(v0)
	TRISBbits.TRISB7 = 0; 
9d002430:	94436040 	lhu	v1,24640(v0)
9d002434:	7c0339c4 	ins	v1,zero,0x7,0x1
9d002438:	a4436040 	sh	v1,24640(v0)
	
	//Configure the port pins as Open-Drain
	ODCBbits.ODCB1 = 1; 
9d00243c:	3c02bf88 	lui	v0,0xbf88
9d002440:	94446070 	lhu	a0,24688(v0)
9d002444:	24030001 	li	v1,1
9d002448:	7c640844 	ins	a0,v1,0x1,0x1
9d00244c:	a4446070 	sh	a0,24688(v0)
	ODCBbits.ODCB7 = 1; 
9d002450:	94446070 	lhu	a0,24688(v0)
9d002454:	7c6439c4 	ins	a0,v1,0x7,0x1
9d002458:	a4446070 	sh	a0,24688(v0)
	
	//Turn LEDs off 
	RLED(Off); 
9d00245c:	3c02bf88 	lui	v0,0xbf88
9d002460:	94446060 	lhu	a0,24672(v0)
9d002464:	7c6439c4 	ins	a0,v1,0x7,0x1
9d002468:	a4446060 	sh	a0,24672(v0)
	GLED(Off);
9d00246c:	94446060 	lhu	a0,24672(v0)
9d002470:	7c640844 	ins	a0,v1,0x1,0x1
9d002474:	a4446060 	sh	a0,24672(v0)
9d002478:	03e00008 	jr	ra
9d00247c:	00000000 	nop

9d002480 <init_pushbuttons>:
}

void init_pushbuttons(void)
{
9d002480:	27bdfff8 	addiu	sp,sp,-8
9d002484:	afbf0004 	sw	ra,4(sp)
	#if USE_PB_CN
	__builtin_disable_interrupts();
9d002488:	41626000 	di	v0
9d00248c:	000000c0 	ehb
	
	//Designate port pins as inputs
	TRISDbits.TRISD6 = 1; 
9d002490:	3c03bf88 	lui	v1,0xbf88
9d002494:	946460c0 	lhu	a0,24768(v1)
9d002498:	24020001 	li	v0,1
9d00249c:	7c443184 	ins	a0,v0,0x6,0x1
9d0024a0:	a46460c0 	sh	a0,24768(v1)
	TRISCbits.TRISC13 = 1;
9d0024a4:	3c03bf88 	lui	v1,0xbf88
9d0024a8:	94646080 	lhu	a0,24704(v1)
9d0024ac:	7c446b44 	ins	a0,v0,0xd,0x1
9d0024b0:	a4646080 	sh	a0,24704(v1)
	
	//Set up the pushbuttons for CN interrupts p.119
	//Step 3. Configure device 
	CNENbits.CNEN15 = 1; //Enable CN interrupts on CN15 (PB1)
9d0024b4:	3c03bf88 	lui	v1,0xbf88
9d0024b8:	8c6461d0 	lw	a0,25040(v1)
9d0024bc:	7c447bc4 	ins	a0,v0,0xf,0x1
9d0024c0:	ac6461d0 	sw	a0,25040(v1)
	CNENbits.CNEN1  = 1; //Enable CN interrupts on CN1  (PB2) 
9d0024c4:	8c6461d0 	lw	a0,25040(v1)
9d0024c8:	7c440844 	ins	a0,v0,0x1,0x1
9d0024cc:	ac6461d0 	sw	a0,25040(v1)
	CNCONbits.ON = 1;    //Enable CN peripheral to generate interrupts
9d0024d0:	3c03bf88 	lui	v1,0xbf88
9d0024d4:	946461c0 	lhu	a0,25024(v1)
9d0024d8:	7c447bc4 	ins	a0,v0,0xf,0x1
9d0024dc:	a46461c0 	sh	a0,25024(v1)
	
	//Step 4. Configure Priority and Subpriority
	IPC6bits.CNIP = 5;	//3 bits: 0-7
9d0024e0:	3c03bf88 	lui	v1,0xbf88
9d0024e4:	8c6410f0 	lw	a0,4336(v1)
9d0024e8:	24050005 	li	a1,5
9d0024ec:	7ca4a484 	ins	a0,a1,0x12,0x3
9d0024f0:	ac6410f0 	sw	a0,4336(v1)
	IPC6bits.CNIS = 3;	//2 bits: 0-2
9d0024f4:	8c6410f0 	lw	a0,4336(v1)
9d0024f8:	24050003 	li	a1,3
9d0024fc:	7ca48c04 	ins	a0,a1,0x10,0x2
9d002500:	ac6410f0 	sw	a0,4336(v1)
	
	//Step 5. Clear Interrupt Flag Status bit
	IFS1bits.CNIF = 0; 
9d002504:	3c03bf88 	lui	v1,0xbf88
9d002508:	8c641040 	lw	a0,4160(v1)
9d00250c:	7c040004 	ins	a0,zero,0x0,0x1
9d002510:	ac641040 	sw	a0,4160(v1)
	
	//Step 6. Set Interrupt Enable bit
	IEC1bits.CNIE = 1; 	
9d002514:	3c03bf88 	lui	v1,0xbf88
9d002518:	8c641070 	lw	a0,4208(v1)
9d00251c:	7c440004 	ins	a0,v0,0x0,0x1
9d002520:	ac641070 	sw	a0,4208(v1)
	
	__builtin_enable_interrupts();
9d002524:	41626020 	ei	v0
	#endif 
}
9d002528:	8fbf0004 	lw	ra,4(sp)
9d00252c:	03e00008 	jr	ra
9d002530:	27bd0008 	addiu	sp,sp,8

9d002534 <main>:
	//Location 3. Clear flag
	//IFS1bits.CNIF = 0; //Clear interrupt flag
}

int main(void) 
{	
9d002534:	27bdff20 	addiu	sp,sp,-224
9d002538:	afbf00dc 	sw	ra,220(sp)
	char message[MAX_MESSAGE_LENGTH];
	char LCD_msg[LCD_MSG_LEN];
  
	//Initiation Routines
	init_status_leds();
9d00253c:	0f400908 	jal	9d002420 <init_status_leds>
9d002540:	afb000d8 	sw	s0,216(sp)
	NU32_Startup(); 	//cache on, interrupts on, LED/button init, UART init
9d002544:	0f400968 	jal	9d0025a0 <NU32_Startup>
9d002548:	3c109d00 	lui	s0,0x9d00
	LCD_Setup();		//Set up LCD
9d00254c:	0f400853 	jal	9d00214c <LCD_Setup>
9d002550:	26102ad0 	addiu	s0,s0,10960
	init_pushbuttons();
9d002554:	0f400920 	jal	9d002480 <init_pushbuttons>
9d002558:	00000000 	nop
	NU32_WriteUART3("Initiation routines completed...\r\n");
9d00255c:	3c049d00 	lui	a0,0x9d00
9d002560:	0f4009ca 	jal	9d002728 <NU32_WriteUART3>
9d002564:	24842aac 	addiu	a0,a0,10924
   
  
	while (1) 
	{	  
		NU32_ReadUART3(message, MAX_MESSAGE_LENGTH);  // get message from computer
9d002568:	27a40010 	addiu	a0,sp,16
9d00256c:	0f4009ad 	jal	9d0026b4 <NU32_ReadUART3>
9d002570:	240500c8 	li	a1,200
		NU32_WriteUART3(message);                     // send message back
9d002574:	0f4009ca 	jal	9d002728 <NU32_WriteUART3>
9d002578:	27a40010 	addiu	a0,sp,16
		NU32_WriteUART3("\r\n");
9d00257c:	0f4009ca 	jal	9d002728 <NU32_WriteUART3>
9d002580:	02002021 	move	a0,s0
		
		LCD_Move(1,0);
9d002584:	24040001 	li	a0,1
9d002588:	0f40080b 	jal	9d00202c <LCD_Move>
9d00258c:	00002821 	move	a1,zero
		LCD_WriteString(message); 
9d002590:	0f400828 	jal	9d0020a0 <LCD_WriteString>
9d002594:	27a40010 	addiu	a0,sp,16
	NU32_WriteUART3("Initiation routines completed...\r\n");
   
  
	while (1) 
	{	  
		NU32_ReadUART3(message, MAX_MESSAGE_LENGTH);  // get message from computer
9d002598:	0b40095b 	j	9d00256c <main+0x38>
9d00259c:	27a40010 	addiu	a0,sp,16

9d0025a0 <NU32_Startup>:

// Perform startup routines:
//  Make NU32_LED1 and NU32_LED2 pins outputs (NU32_USER is by default an input)
//  Initialize the serial port - UART3 (no interrupt) 
//  Enable interrupts
void NU32_Startup() {
9d0025a0:	27bdfff8 	addiu	sp,sp,-8
9d0025a4:	afbf0004 	sw	ra,4(sp)
  // disable interrupts
  __builtin_disable_interrupts();
9d0025a8:	41626000 	di	v0
9d0025ac:	000000c0 	ehb
  // see Chapter 2 "CPU for Devices with M4K Core" of the PIC32 reference manual
  // most of the other bits have prescribed values
  // microchip does not provide a _CP0_SET_CONFIG macro, so we directly use
  // the compiler built-in command _mtc0
  // to disable cache, use 0xa4210582 
  __builtin_mtc0(_CP0_CONFIG, _CP0_CONFIG_SELECT, 0xa4210583); 
9d0025b0:	3c02a421 	lui	v0,0xa421
9d0025b4:	24420583 	addiu	v0,v0,1411
9d0025b8:	40828000 	mtc0	v0,c0_config
9d0025bc:	000000c0 	ehb
  
  // set the prefectch cache wait state to 2, as per the
  // electrical characteristics data sheet
  CHECONbits.PFMWS = 0x2;   
9d0025c0:	3c02bf88 	lui	v0,0xbf88
9d0025c4:	8c434000 	lw	v1,16384(v0)
9d0025c8:	24050002 	li	a1,2
9d0025cc:	7ca31004 	ins	v1,a1,0x0,0x3
9d0025d0:	ac434000 	sw	v1,16384(v0)

  //enable prefetch for cacheable and noncacheable memory
  CHECONbits.PREFEN = 0x3; 
9d0025d4:	8c434000 	lw	v1,16384(v0)
9d0025d8:	24040003 	li	a0,3
9d0025dc:	7c832904 	ins	v1,a0,0x4,0x2
9d0025e0:	ac434000 	sw	v1,16384(v0)

  // 0 data RAM access wait states
  BMXCONbits.BMXWSDRM = 0x0;
9d0025e4:	3c02bf88 	lui	v0,0xbf88
9d0025e8:	8c432000 	lw	v1,8192(v0)
9d0025ec:	7c033184 	ins	v1,zero,0x6,0x1
9d0025f0:	ac432000 	sw	v1,8192(v0)
  
  // enable multi vector interrupts
  INTCONbits.MVEC = 0x1;
9d0025f4:	3c02bf88 	lui	v0,0xbf88
9d0025f8:	8c461000 	lw	a2,4096(v0)
9d0025fc:	24030001 	li	v1,1
9d002600:	7c666304 	ins	a2,v1,0xc,0x1
9d002604:	ac461000 	sw	a2,4096(v0)

  // disable JTAG to get B10, B11, B12 and B13 back
  DDPCONbits.JTAGEN = 0;
9d002608:	3c02bf81 	lui	v0,0xbf81
9d00260c:	9046f200 	lbu	a2,-3584(v0)
9d002610:	7c0618c4 	ins	a2,zero,0x3,0x1
9d002614:	a046f200 	sb	a2,-3584(v0)

  TRISFCLR = 0x0003;  // Make F0 and F1 outputs (LED1 and LED2)
9d002618:	3c02bf88 	lui	v0,0xbf88
9d00261c:	ac446144 	sw	a0,24900(v0)
  NU32_LED1 = 1;      // LED1 is off
9d002620:	3c02bf88 	lui	v0,0xbf88
9d002624:	90446160 	lbu	a0,24928(v0)
9d002628:	7c640004 	ins	a0,v1,0x0,0x1
9d00262c:	a0446160 	sb	a0,24928(v0)
  NU32_LED2 = 0;      // LED2 is on
9d002630:	90446160 	lbu	a0,24928(v0)
9d002634:	7c040844 	ins	a0,zero,0x1,0x1
9d002638:	a0446160 	sb	a0,24928(v0)

  // turn on UART3 without an interrupt
  U3MODEbits.BRGH = 0; // set baud to NU32_DESIRED_BAUD
9d00263c:	3c02bf80 	lui	v0,0xbf80
9d002640:	94446400 	lhu	a0,25600(v0)
9d002644:	7c0418c4 	ins	a0,zero,0x3,0x1
9d002648:	a4446400 	sh	a0,25600(v0)
  U3BRG = ((NU32_SYS_FREQ / NU32_DESIRED_BAUD) / 16) - 1;
9d00264c:	24060014 	li	a2,20
9d002650:	3c04bf80 	lui	a0,0xbf80
9d002654:	ac866440 	sw	a2,25664(a0)

  // 8 bit, no parity bit, and 1 stop bit (8N1 setup)
  U3MODEbits.PDSEL = 0;
9d002658:	94446400 	lhu	a0,25600(v0)
9d00265c:	7c041044 	ins	a0,zero,0x1,0x2
9d002660:	a4446400 	sh	a0,25600(v0)
  U3MODEbits.STSEL = 0;
9d002664:	94446400 	lhu	a0,25600(v0)
9d002668:	7c040004 	ins	a0,zero,0x0,0x1
9d00266c:	a4446400 	sh	a0,25600(v0)

  // configure TX & RX pins as output & input pins
  U3STAbits.UTXEN = 1;
9d002670:	3c04bf80 	lui	a0,0xbf80
9d002674:	8c866410 	lw	a2,25616(a0)
9d002678:	7c665284 	ins	a2,v1,0xa,0x1
9d00267c:	ac866410 	sw	a2,25616(a0)
  U3STAbits.URXEN = 1;
9d002680:	8c866410 	lw	a2,25616(a0)
9d002684:	7c666304 	ins	a2,v1,0xc,0x1
9d002688:	ac866410 	sw	a2,25616(a0)
  // configure hardware flow control using RTS and CTS
  U3MODEbits.UEN = 2;
9d00268c:	94446400 	lhu	a0,25600(v0)
9d002690:	7ca44a04 	ins	a0,a1,0x8,0x2
9d002694:	a4446400 	sh	a0,25600(v0)

  // enable the uart
  U3MODEbits.ON = 1;
9d002698:	94446400 	lhu	a0,25600(v0)
9d00269c:	7c647bc4 	ins	a0,v1,0xf,0x1
9d0026a0:	a4446400 	sh	a0,25600(v0)

  __builtin_enable_interrupts();
9d0026a4:	41626020 	ei	v0
}
9d0026a8:	8fbf0004 	lw	ra,4(sp)
9d0026ac:	03e00008 	jr	ra
9d0026b0:	27bd0008 	addiu	sp,sp,8

9d0026b4 <NU32_ReadUART3>:
// Read from UART3
// block other functions until you get a '\r' or '\n'
// send the pointer to your char array and the number of elements in the array
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
9d0026b4:	00003021 	move	a2,zero
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d0026b8:	3c03bf80 	lui	v1,0xbf80
      data = U3RXREG;      // read the data
9d0026bc:	3c08bf80 	lui	t0,0xbf80
      if ((data == '\n') || (data == '\r')) {
9d0026c0:	2407000a 	li	a3,10
9d0026c4:	0b4009c1 	j	9d002704 <NU32_ReadUART3+0x50>
9d0026c8:	2409000d 	li	t1,13
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d0026cc:	8c626410 	lw	v0,25616(v1)
9d0026d0:	30420001 	andi	v0,v0,0x1
9d0026d4:	1040fffd 	beqz	v0,9d0026cc <NU32_ReadUART3+0x18>
9d0026d8:	00000000 	nop
      data = U3RXREG;      // read the data
9d0026dc:	8d026430 	lw	v0,25648(t0)
9d0026e0:	7c021420 	seb	v0,v0
      if ((data == '\n') || (data == '\r')) {
9d0026e4:	5047000e 	beql	v0,a3,9d002720 <NU32_ReadUART3+0x6c>
9d0026e8:	00862021 	addu	a0,a0,a2
9d0026ec:	1049000b 	beq	v0,t1,9d00271c <NU32_ReadUART3+0x68>
9d0026f0:	00865021 	addu	t2,a0,a2
        complete = 1;
      } else {
        message[num_bytes] = data;
9d0026f4:	a1420000 	sb	v0,0(t2)
        ++num_bytes;
9d0026f8:	24c60001 	addiu	a2,a2,1
        // roll over if the array is too small
        if (num_bytes >= maxLength) {
9d0026fc:	00c5102a 	slt	v0,a2,a1
          num_bytes = 0;
9d002700:	0002300a 	movz	a2,zero,v0
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d002704:	8c626410 	lw	v0,25616(v1)
9d002708:	30420001 	andi	v0,v0,0x1
9d00270c:	1040ffef 	beqz	v0,9d0026cc <NU32_ReadUART3+0x18>
9d002710:	00000000 	nop
9d002714:	0b4009b7 	j	9d0026dc <NU32_ReadUART3+0x28>
9d002718:	00000000 	nop
        }
      }
    }
  }
  // end the string
  message[num_bytes] = '\0';
9d00271c:	00862021 	addu	a0,a0,a2
9d002720:	03e00008 	jr	ra
9d002724:	a0800000 	sb	zero,0(a0)

9d002728 <NU32_WriteUART3>:
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d002728:	80850000 	lb	a1,0(a0)
9d00272c:	10a0000b 	beqz	a1,9d00275c <NU32_WriteUART3+0x34>
9d002730:	3c03bf80 	lui	v1,0xbf80
    while (U3STAbits.UTXBF) {
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d002734:	3c06bf80 	lui	a2,0xbf80
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
    while (U3STAbits.UTXBF) {
9d002738:	8c626410 	lw	v0,25616(v1)
9d00273c:	30420200 	andi	v0,v0,0x200
9d002740:	1440fffd 	bnez	v0,9d002738 <NU32_WriteUART3+0x10>
9d002744:	00000000 	nop
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d002748:	acc56420 	sw	a1,25632(a2)
    ++string;
9d00274c:	24840001 	addiu	a0,a0,1
  message[num_bytes] = '\0';
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d002750:	80850000 	lb	a1,0(a0)
9d002754:	14a0fff8 	bnez	a1,9d002738 <NU32_WriteUART3+0x10>
9d002758:	00000000 	nop
9d00275c:	03e00008 	jr	ra
9d002760:	00000000 	nop

Disassembly of section .text.general_exception:

9d002764 <_general_exception_context>:
9d002764:	27bdffa8 	addiu	sp,sp,-88
9d002768:	afa10004 	sw	at,4(sp)
9d00276c:	afa20008 	sw	v0,8(sp)
9d002770:	afa3000c 	sw	v1,12(sp)
9d002774:	afa40010 	sw	a0,16(sp)
9d002778:	afa50014 	sw	a1,20(sp)
9d00277c:	afa60018 	sw	a2,24(sp)
9d002780:	afa7001c 	sw	a3,28(sp)
9d002784:	afa80020 	sw	t0,32(sp)
9d002788:	afa90024 	sw	t1,36(sp)
9d00278c:	afaa0028 	sw	t2,40(sp)
9d002790:	afab002c 	sw	t3,44(sp)
9d002794:	afac0030 	sw	t4,48(sp)
9d002798:	afad0034 	sw	t5,52(sp)
9d00279c:	afae0038 	sw	t6,56(sp)
9d0027a0:	afaf003c 	sw	t7,60(sp)
9d0027a4:	afb80040 	sw	t8,64(sp)
9d0027a8:	afb90044 	sw	t9,68(sp)
9d0027ac:	afbf0048 	sw	ra,72(sp)
9d0027b0:	00004012 	mflo	t0
9d0027b4:	afa8004c 	sw	t0,76(sp)
9d0027b8:	00004010 	mfhi	t0
9d0027bc:	afa80050 	sw	t0,80(sp)
9d0027c0:	3c1a9d00 	lui	k0,0x9d00
9d0027c4:	275a29c8 	addiu	k0,k0,10696
9d0027c8:	00000000 	nop
9d0027cc:	40046800 	mfc0	a0,c0_cause
9d0027d0:	40056000 	mfc0	a1,c0_status
9d0027d4:	0340f809 	jalr	k0
9d0027d8:	00000000 	nop
9d0027dc:	8fa80050 	lw	t0,80(sp)
9d0027e0:	01000011 	mthi	t0
9d0027e4:	8fa8004c 	lw	t0,76(sp)
9d0027e8:	01000013 	mtlo	t0
9d0027ec:	8fa10004 	lw	at,4(sp)
9d0027f0:	8fa20008 	lw	v0,8(sp)
9d0027f4:	8fa3000c 	lw	v1,12(sp)
9d0027f8:	8fa40010 	lw	a0,16(sp)
9d0027fc:	8fa50014 	lw	a1,20(sp)
9d002800:	8fa60018 	lw	a2,24(sp)
9d002804:	8fa7001c 	lw	a3,28(sp)
9d002808:	8fa80020 	lw	t0,32(sp)
9d00280c:	8fa90024 	lw	t1,36(sp)
9d002810:	8faa0028 	lw	t2,40(sp)
9d002814:	8fab002c 	lw	t3,44(sp)
9d002818:	8fac0030 	lw	t4,48(sp)
9d00281c:	8fad0034 	lw	t5,52(sp)
9d002820:	8fae0038 	lw	t6,56(sp)
9d002824:	8faf003c 	lw	t7,60(sp)
9d002828:	8fb80040 	lw	t8,64(sp)
9d00282c:	8fb90044 	lw	t9,68(sp)
9d002830:	8fbf0048 	lw	ra,72(sp)
9d002834:	27bd0058 	addiu	sp,sp,88
9d002838:	000000c0 	ehb
9d00283c:	42000018 	eret

Disassembly of section .text.itoa:

9d002840 <itoa>:
9d002840:	00801021 	move	v0,a0
9d002844:	04a0001a 	bltz	a1,9d0028b0 <itoa+0x70>
9d002848:	00801821 	move	v1,a0
9d00284c:	0b400a16 	j	9d002858 <itoa+0x18>
9d002850:	00a03821 	move	a3,a1
9d002854:	01001821 	move	v1,t0
9d002858:	00e6001b 	divu	zero,a3,a2
9d00285c:	00c001f4 	teq	a2,zero,0x7
9d002860:	00003812 	mflo	a3
9d002864:	14e0fffb 	bnez	a3,9d002854 <itoa+0x14>
9d002868:	24680001 	addiu	t0,v1,1
9d00286c:	a1000000 	sb	zero,0(t0)
9d002870:	00a6001b 	divu	zero,a1,a2
9d002874:	00c001f4 	teq	a2,zero,0x7
9d002878:	00002810 	mfhi	a1
9d00287c:	00004012 	mflo	t0
9d002880:	2463ffff 	addiu	v1,v1,-1
9d002884:	7c053c20 	seb	a3,a1
9d002888:	28e9000a 	slti	t1,a3,10
9d00288c:	24aa0007 	addiu	t2,a1,7
9d002890:	15200002 	bnez	t1,9d00289c <itoa+0x5c>
9d002894:	00002812 	mflo	a1
9d002898:	7c0a3c20 	seb	a3,t2
9d00289c:	24e70030 	addiu	a3,a3,48
9d0028a0:	1500fff3 	bnez	t0,9d002870 <itoa+0x30>
9d0028a4:	a0670001 	sb	a3,1(v1)
9d0028a8:	03e00008 	jr	ra
9d0028ac:	00000000 	nop
9d0028b0:	24830001 	addiu	v1,a0,1
9d0028b4:	2404002d 	li	a0,45
9d0028b8:	a0440000 	sb	a0,0(v0)
9d0028bc:	0b400a13 	j	9d00284c <itoa+0xc>
9d0028c0:	00052823 	negu	a1,a1

Disassembly of section .text.utoa:

9d0028c4 <utoa>:
9d0028c4:	00801021 	move	v0,a0
9d0028c8:	0b400a35 	j	9d0028d4 <utoa+0x10>
9d0028cc:	00a01821 	move	v1,a1
9d0028d0:	00801021 	move	v0,a0
9d0028d4:	0066001b 	divu	zero,v1,a2
9d0028d8:	00c001f4 	teq	a2,zero,0x7
9d0028dc:	00001812 	mflo	v1
9d0028e0:	1460fffb 	bnez	v1,9d0028d0 <utoa+0xc>
9d0028e4:	24440001 	addiu	a0,v0,1
9d0028e8:	a0800000 	sb	zero,0(a0)
9d0028ec:	00a6001b 	divu	zero,a1,a2
9d0028f0:	00c001f4 	teq	a2,zero,0x7
9d0028f4:	00002810 	mfhi	a1
9d0028f8:	00002012 	mflo	a0
9d0028fc:	2442ffff 	addiu	v0,v0,-1
9d002900:	7c051c20 	seb	v1,a1
9d002904:	2867000a 	slti	a3,v1,10
9d002908:	24a80007 	addiu	t0,a1,7
9d00290c:	14e00002 	bnez	a3,9d002918 <utoa+0x54>
9d002910:	00002812 	mflo	a1
9d002914:	7c081c20 	seb	v1,t0
9d002918:	24630030 	addiu	v1,v1,48
9d00291c:	1480fff3 	bnez	a0,9d0028ec <utoa+0x28>
9d002920:	a0430001 	sb	v1,1(v0)
9d002924:	03e00008 	jr	ra
9d002928:	00000000 	nop

Disassembly of section .text.main_entry:

9d00292c <_main_entry>:
9d00292c:	3c040000 	lui	a0,0x0
9d002930:	27bdffe8 	addiu	sp,sp,-24
9d002934:	24840000 	addiu	a0,a0,0
9d002938:	10800003 	beqz	a0,9d002948 <_main_entry+0x1c>
9d00293c:	afbf0014 	sw	ra,20(sp)
9d002940:	0080f809 	jalr	a0
9d002944:	00000000 	nop
9d002948:	30840000 	andi	a0,a0,0x0
9d00294c:	30a50000 	andi	a1,a1,0x0
9d002950:	3c089d00 	lui	t0,0x9d00
9d002954:	25082534 	addiu	t0,t0,9524
9d002958:	0100f809 	jalr	t0
9d00295c:	00000000 	nop

9d002960 <__crt0_exit>:
9d002960:	3c020000 24420000 10400003 00000000     ...<..B$..@.....
9d002970:	0040f809 00000000 1000fff9 00000000     ..@.............

Disassembly of section .text._bootstrap_exception_handler:

9d002980 <_bootstrap_exception_handler>:
9d002980:	3c020000 	lui	v0,0x0
9d002984:	24420000 	addiu	v0,v0,0
9d002988:	10400005 	beqz	v0,9d0029a0 <_bootstrap_exception_handler+0x20>
9d00298c:	3c020000 	lui	v0,0x0
9d002990:	24420000 	addiu	v0,v0,0
9d002994:	10400003 	beqz	v0,9d0029a4 <_bootstrap_exception_handler+0x24>
9d002998:	3c029d00 	lui	v0,0x9d00
9d00299c:	7000003f 	sdbbp
9d0029a0:	3c029d00 	lui	v0,0x9d00
9d0029a4:	24422a58 	addiu	v0,v0,10840
9d0029a8:	10400005 	beqz	v0,9d0029c0 <_bootstrap_exception_handler+0x40>
9d0029ac:	00000000 	nop
9d0029b0:	27bdffe8 	addiu	sp,sp,-24
9d0029b4:	afbf0014 	sw	ra,20(sp)
9d0029b8:	0040f809 	jalr	v0
9d0029bc:	00000000 	nop
9d0029c0:	0b400a70 	j	9d0029c0 <_bootstrap_exception_handler+0x40>
9d0029c4:	00000000 	nop

Disassembly of section .text._general_exception_handler:

9d0029c8 <_general_exception_handler>:
9d0029c8:	3c020000 	lui	v0,0x0
9d0029cc:	24420000 	addiu	v0,v0,0
9d0029d0:	10400005 	beqz	v0,9d0029e8 <_general_exception_handler+0x20>
9d0029d4:	3c020000 	lui	v0,0x0
9d0029d8:	24420000 	addiu	v0,v0,0
9d0029dc:	10400003 	beqz	v0,9d0029ec <_general_exception_handler+0x24>
9d0029e0:	3c029d00 	lui	v0,0x9d00
9d0029e4:	7000003f 	sdbbp
9d0029e8:	3c029d00 	lui	v0,0x9d00
9d0029ec:	24422a58 	addiu	v0,v0,10840
9d0029f0:	10400005 	beqz	v0,9d002a08 <_general_exception_handler+0x40>
9d0029f4:	00000000 	nop
9d0029f8:	27bdffe8 	addiu	sp,sp,-24
9d0029fc:	afbf0014 	sw	ra,20(sp)
9d002a00:	0040f809 	jalr	v0
9d002a04:	00000000 	nop
9d002a08:	0b400a82 	j	9d002a08 <_general_exception_handler+0x40>
9d002a0c:	00000000 	nop

Disassembly of section .vector_default:

9d002a10 <_DefaultInterrupt>:
9d002a10:	3c020000 	lui	v0,0x0
9d002a14:	24420000 	addiu	v0,v0,0
9d002a18:	10400007 	beqz	v0,9d002a38 <_DefaultInterrupt+0x28>
9d002a1c:	3c020000 	lui	v0,0x0
9d002a20:	24420000 	addiu	v0,v0,0
9d002a24:	50400005 	beqzl	v0,9d002a3c <_DefaultInterrupt+0x2c>
9d002a28:	3c029d00 	lui	v0,0x9d00
9d002a2c:	7000003f 	sdbbp
9d002a30:	03e00008 	jr	ra
9d002a34:	00000000 	nop
9d002a38:	3c029d00 	lui	v0,0x9d00
9d002a3c:	24422a58 	addiu	v0,v0,10840
9d002a40:	10400003 	beqz	v0,9d002a50 <_DefaultInterrupt+0x40>
9d002a44:	00000000 	nop
9d002a48:	0040f809 	jalr	v0
9d002a4c:	00000000 	nop
9d002a50:	03e00008 	jr	ra
9d002a54:	00000000 	nop

Disassembly of section .text:

9d002a58 <__pic32_software_reset>:
9d002a58:	41606000 	di
9d002a5c:	000000c0 	ehb
9d002a60:	3c03aa99 	lui	v1,0xaa99
9d002a64:	3c02bf81 	lui	v0,0xbf81
9d002a68:	24636655 	addiu	v1,v1,26197
9d002a6c:	ac40f230 	sw	zero,-3536(v0)
9d002a70:	ac43f230 	sw	v1,-3536(v0)
9d002a74:	3c035566 	lui	v1,0x5566
9d002a78:	346399aa 	ori	v1,v1,0x99aa
9d002a7c:	ac43f230 	sw	v1,-3536(v0)
9d002a80:	3c02bf81 	lui	v0,0xbf81
9d002a84:	24030001 	li	v1,1
9d002a88:	ac43f618 	sw	v1,-2536(v0)
9d002a8c:	3c02bf81 	lui	v0,0xbf81
9d002a90:	8c42f610 	lw	v0,-2544(v0)
9d002a94:	0b400a98 	j	9d002a60 <__pic32_software_reset+0x8>
9d002a98:	00000000 	nop

Disassembly of section .rodata:

9d002a9c <.LC0>:
9d002a9c:	003a4e43 	0x3a4e43

9d002aa0 <.LC1>:
9d002aa0:	656e6f44 	0x656e6f44
9d002aa4:	52534920 	beql	s2,s3,9d014f28 <.LFE0+0x1240c>
9d002aa8:	0000002e 	0x2e

9d002aac <.LC2>:
9d002aac:	74696e49 	jalx	91a5b924 <_bmxdkpba_address+0x91a3b924>
9d002ab0:	69746169 	0x69746169
9d002ab4:	72206e6f 	0x72206e6f
9d002ab8:	6974756f 	0x6974756f
9d002abc:	2073656e 	addi	s3,v1,25966
9d002ac0:	706d6f63 	0x706d6f63
9d002ac4:	6574656c 	0x6574656c
9d002ac8:	2e2e2e64 	sltiu	t6,s1,11876
9d002acc:	00000a0d 	break	0x0,0x28
9d002ad0:	00000a0d 	break	0x0,0x28

Disassembly of section .dinit:

9d002ad4 <.dinit>:
9d002ad4:	a0000014 	sb	zero,20(zero)
9d002ad8:	00000010 	mfhi	zero
9d002adc:	00000000 	nop
9d002ae0:	a0000000 	sb	zero,0(zero)
9d002ae4:	00000014 	0x14
	...
9d002af0:	22222222 	addi	v0,s1,8738

Disassembly of section .text:

9d002af4 <_nmi_handler>:
9d002af4:	401a6000 	mfc0	k0,c0_status
9d002af8:	3c1bffbf 	lui	k1,0xffbf
9d002afc:	377bffff 	ori	k1,k1,0xffff
9d002b00:	035bd024 	and	k0,k0,k1
9d002b04:	409a6000 	mtc0	k0,c0_status
9d002b08:	42000018 	eret

Disassembly of section .text._on_reset:

9d002b0c <_on_reset>:
9d002b0c:	03e00008 	jr	ra
9d002b10:	00000000 	nop

Disassembly of section .text._on_bootstrap:

9d002b14 <_on_bootstrap>:
9d002b14:	03e00008 	jr	ra
9d002b18:	00000000 	nop
